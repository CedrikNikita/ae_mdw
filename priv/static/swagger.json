{
  "basePath": "/",
  "consumes": [
    "application/json"
  ],
  "definitions": {},
  "info": {
    "description": "API for [Aeternity Middleware](https://github.com/aeternity/ae_mdw)",
    "title": "Aeternity Middleware",
    "version": "1.0"
  },
  "paths": {
    "/name/{id}": {
      "get": {
        "deprecated": false,
        "description": "Get information for given name or encoded hash.",
        "operationId": "get_name_by_id",
        "parameters": [
          {
            "description": "The name or encoded hash.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "x-example": "wwwbeaconoidcom.chain"
          }
        ],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns information for given name.",
            "schema": {}
          },
          "400": {
            "description": "Bad request.",
            "schema": {}
          },
          "404": {
            "description": "Not found.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/names/active": {
      "get": {
        "deprecated": false,
        "description": "Get active names.",
        "operationId": "get_active_names",
        "parameters": [],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns information for active names.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/names/all": {
      "get": {
        "deprecated": false,
        "description": "Get all names.",
        "operationId": "get_all_names",
        "parameters": [],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns information for names.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/names/auctions": {
      "get": {
        "deprecated": false,
        "description": "Get all auctions.",
        "operationId": "get_all_auctions",
        "parameters": [],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns information for all auctions.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/names/pointees/{id}": {
      "get": {
        "deprecated": false,
        "description": "Get names pointing to a particular pubkey.",
        "operationId": "get_pointees_by_id",
        "parameters": [
          {
            "description": "The public key.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "x-example": "ak_2HNsyfhFYgByVq8rzn7q4hRbijsa8LP1VN192zZwGm1JRYnB5C"
          }
        ],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns names pointing to a particular pubkey and name update transaction which set up that pointer.",
            "schema": {}
          },
          "400": {
            "description": "Bad request.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/names/pointers/{id}": {
      "get": {
        "deprecated": false,
        "description": "Get pointers for given name.",
        "operationId": "get_pointers_by_id",
        "parameters": [
          {
            "description": "The name.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "x-example": "wwwbeaconoidcom.chain"
          }
        ],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns just pointers for given name.",
            "schema": {}
          },
          "400": {
            "description": "Bad request.",
            "schema": {}
          },
          "404": {
            "description": "Not found.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/status": {
      "get": {
        "deprecated": false,
        "description": "Get middleware status.",
        "operationId": "get_status",
        "parameters": [],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns the status of the MDW.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/tx/{hash}": {
      "get": {
        "deprecated": false,
        "description": "Get a transaction by a given hash.",
        "operationId": "get_tx_by_hash",
        "parameters": [
          {
            "description": "The transaction hash.",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string",
            "x-example": "th_zATv7B4RHS45GamShnWgjkvcrQfZUWQkZ8gk1RD4m2uWLJKnq"
          }
        ],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns the transaction.",
            "schema": {}
          },
          "400": {
            "description": "Bad request.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/txi/{index}": {
      "get": {
        "deprecated": false,
        "description": "Get a transaction by a given index.",
        "operationId": "get_tx_by_index",
        "parameters": [
          {
            "description": "The transaction index.",
            "in": "path",
            "name": "index",
            "required": true,
            "type": "integer",
            "x-example": 10000000
          }
        ],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns the transaction.",
            "schema": {}
          },
          "400": {
            "description": "Bad request.",
            "schema": {}
          },
          "404": {
            "description": "Not found.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/txs/count": {
      "get": {
        "deprecated": false,
        "description": "Get count of transactions at the current height.",
        "operationId": "get_current_tx_count",
        "parameters": [],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns count of all transactions at the current height.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/txs/count/{id}": {
      "get": {
        "deprecated": false,
        "description": "Get transactions count and its type for given aeternity ID.",
        "operationId": "get_tx_count_by_id",
        "parameters": [
          {
            "description": "The ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "x-example": "ak_g5vQK6beY3vsTJHH7KBusesyzq9WMdEYorF8VyvZURXTjLnxT"
          }
        ],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns transactions count and its type for given aeternity ID.",
            "schema": {}
          },
          "400": {
            "description": "Bad request.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/txs/{direction}": {
      "get": {
        "deprecated": false,
        "description": "Get a transactions from beginning or end of the chain. More [info](https://github.com/aeternity/ae_mdw#transaction-querying).",
        "operationId": "get_txs_by_direction",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "The transaction type. The query allows providing of multiple type parameters. [More info](https://github.com/aeternity/ae_mdw#types).",
            "in": "query",
            "items": {
              "enum": [
                "channel_close_mutual",
                "channel_close_solo",
                "channel_create",
                "channel_deposit",
                "channel_force_progress",
                "channel_offchain",
                "channel_settle",
                "channel_slash",
                "channel_snapshot_solo",
                "channel_withdraw",
                "contract_call",
                "contract_create",
                "ga_attach",
                "ga_meta",
                "name_claim",
                "name_preclaim",
                "name_revoke",
                "name_transfer",
                "name_update",
                "oracle_extend",
                "oracle_query",
                "oracle_register",
                "oracle_response",
                "paying_for",
                "spend"
              ],
              "type": "string"
            },
            "name": "type",
            "required": false,
            "type": "array",
            "x-example": "channel_create"
          },
          {
            "collectionFormat": "multi",
            "description": "The type group. The query allows providing of multiple type group parameters. [More info](https://github.com/aeternity/ae_mdw#types).",
            "in": "query",
            "items": {
              "enum": [
                "channel",
                "contract",
                "ga",
                "name",
                "oracle",
                "paying_for",
                "spend"
              ],
              "type": "string"
            },
            "name": "type_group",
            "required": false,
            "type": "array",
            "x-example": "channel"
          },
          {
            "description": "The account ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids).",
            "in": "query",
            "name": "account",
            "required": false,
            "type": "string",
            "x-example": "ak_g5vQK6beY3vsTJHH7KBusesyzq9WMdEYorF8VyvZURXTjLnxT"
          },
          {
            "description": "The contract ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids).",
            "in": "query",
            "name": "contract",
            "required": false,
            "type": "string",
            "x-example": "ct_2AfnEfCSZCTEkxL5Yoi4Yfq6fF7YapHRaFKDJK3THMXMBspp5z"
          },
          {
            "description": "The channel ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids).",
            "in": "query",
            "name": "channel",
            "required": false,
            "type": "string",
            "x-example": "ch_22usvXSjYaDPdhecyhub7tZnYpHeCEZdscEEyhb2M4rHb58RyD"
          },
          {
            "description": "The oracle ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids).",
            "in": "query",
            "name": "oracle",
            "required": false,
            "type": "string",
            "x-example": "ok_24jcHLTZQfsou7NvomRJ1hKEnjyNqbYSq2Az7DmyrAyUHPq8uR"
          },
          {
            "default": 1,
            "description": "The number of page to show.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer",
            "x-example": 1
          },
          {
            "default": 10,
            "description": "The numbers of items to return.",
            "format": "int32",
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer",
            "x-example": 10
          },
          {
            "description": "The direction - **forward** is from genesis to the end, **backward** is from end to the beginning.",
            "enum": [
              "forward",
              "backward"
            ],
            "in": "path",
            "name": "direction",
            "required": true,
            "type": "string"
          },
          {
            "description": "The sender ID.",
            "exaple": "ak_26dopN3U2zgfJG4Ao4J4ZvLTf5mqr7WAgLAq6WxjxuSapZhQg5",
            "in": "query",
            "name": "sender_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "The recipient ID.",
            "exaple": "ak_r7wvMxmhnJ3cMp75D8DUnxNiAvXs8qcdfbJ1gUWfH8Ufrx2A2",
            "in": "query",
            "name": "recipient_id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns result regarding the according criteria.",
            "schema": {}
          },
          "400": {
            "description": "Bad request.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    },
    "/txs/{scope_type}/{range}": {
      "get": {
        "deprecated": false,
        "description": "Get a transactions bounded by scope/range.",
        "operationId": "get_txs_by_scope_type_range",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "The transaction type. The query allows providing of multiple type parameters. [More info](https://github.com/aeternity/ae_mdw#types).",
            "in": "query",
            "items": {
              "enum": [
                "channel_close_mutual",
                "channel_close_solo",
                "channel_create",
                "channel_deposit",
                "channel_force_progress",
                "channel_offchain",
                "channel_settle",
                "channel_slash",
                "channel_snapshot_solo",
                "channel_withdraw",
                "contract_call",
                "contract_create",
                "ga_attach",
                "ga_meta",
                "name_claim",
                "name_preclaim",
                "name_revoke",
                "name_transfer",
                "name_update",
                "oracle_extend",
                "oracle_query",
                "oracle_register",
                "oracle_response",
                "paying_for",
                "spend"
              ],
              "type": "string"
            },
            "name": "type",
            "required": false,
            "type": "array",
            "x-example": "channel_create"
          },
          {
            "collectionFormat": "multi",
            "description": "The type group. The query allows providing of multiple type group parameters. [More info](https://github.com/aeternity/ae_mdw#types).",
            "in": "query",
            "items": {
              "enum": [
                "channel",
                "contract",
                "ga",
                "name",
                "oracle",
                "paying_for",
                "spend"
              ],
              "type": "string"
            },
            "name": "type_group",
            "required": false,
            "type": "array",
            "x-example": "channel"
          },
          {
            "description": "The account ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids).",
            "in": "query",
            "name": "account",
            "required": false,
            "type": "string",
            "x-example": "ak_g5vQK6beY3vsTJHH7KBusesyzq9WMdEYorF8VyvZURXTjLnxT"
          },
          {
            "description": "The contract ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids).",
            "in": "query",
            "name": "contract",
            "required": false,
            "type": "string",
            "x-example": "ct_2AfnEfCSZCTEkxL5Yoi4Yfq6fF7YapHRaFKDJK3THMXMBspp5z"
          },
          {
            "description": "The channel ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids).",
            "in": "query",
            "name": "channel",
            "required": false,
            "type": "string",
            "x-example": "ch_22usvXSjYaDPdhecyhub7tZnYpHeCEZdscEEyhb2M4rHb58RyD"
          },
          {
            "description": "The oracle ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids).",
            "in": "query",
            "name": "oracle",
            "required": false,
            "type": "string",
            "x-example": "ok_24jcHLTZQfsou7NvomRJ1hKEnjyNqbYSq2Az7DmyrAyUHPq8uR"
          },
          {
            "default": 1,
            "description": "The number of page to show.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer",
            "x-example": 1
          },
          {
            "default": 10,
            "description": "The numbers of items to return.",
            "format": "int32",
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer",
            "x-example": 10
          },
          {
            "description": "The scope type.",
            "enum": [
              "gen",
              "txi"
            ],
            "in": "path",
            "name": "scope_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The range.",
            "in": "path",
            "name": "range",
            "required": true,
            "type": "string",
            "x-example": "0-265354"
          }
        ],
        "produces": [
          [
            "application/json"
          ]
        ],
        "responses": {
          "200": {
            "description": "Returns result regarding the according criteria.",
            "schema": {}
          },
          "400": {
            "description": "Bad request.",
            "schema": {}
          }
        },
        "summary": "",
        "tags": [
          "Middleware"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0"
}